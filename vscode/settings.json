{
  "window.zoomLevel": 1,
  "editor.fontFamily": "JetBrainsMono Nerd Font",
  "editor.fontLigatures": true,
  // This is how you change the bracket pair colors
  "editor.bracketPairColorization.enabled": true,
  "workbench.colorCustomizations": {
    "editorBracketHighlight.foreground1": "#EBFAFA",
    "editorBracketHighlight.foreground2": "#EBFAFA",
    "editorBracketHighlight.foreground3": "#EBFAFA",
    "editorBracketHighlight.foreground4": "#EBFAFA",
    "editorBracketHighlight.foreground5": "#EBFAFA",
    "editorBracketHighlight.foreground6": "#EBFAFA"
  },
  "editor.accessibilitySupport": "off",
  // If you don't set this, you have to be manually autoformatting
  "editor.formatOnSave": true,
  "editor.minimap.enabled": false,
  // I don't want a default formatter for any other file type
  "editor.defaultFormatter": null,
  // Specifically set Prettier as the formatter for jsonc
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  // Specifically set Prettier as the formatter for Markdown
  "[markdown]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  // "markdown-header-coloring.userDefinedHeaderColor": {
  //   "enabled": true,
  //   "Header_1": {
  //     "color": "#0D1116",
  //     "backgroundColor": "background-color: #987afb;",
  //     "textDecoration": ""
  //   },
  //   "Header_2": {
  //     "color": "#0D1116",
  //     "backgroundColor": "background-color: #37f499;",
  //     "textDecoration": ""
  //   },
  //   "Header_3": {
  //     "color": "#0D1116",
  //     "backgroundColor": "background-color: #04d1f9;",
  //     "textDecoration": ""
  //   },
  //   "Header_4": {
  //     "color": "#0D1116",
  //     "backgroundColor": "background-color: #949ae5;",
  //     "textDecoration": ""
  //   },
  //   "Header_5": {
  //     "color": "#0D1116",
  //     "backgroundColor": "background-color: #19dfcf;",
  //     "textDecoration": ""
  //   },
  //   "Header_6": {
  //     "color": "#0D1116",
  //     "backgroundColor": "background-color: #5fa9f4;",
  //     "textDecoration": ""
  //   }
  // },

  "markdown-header-coloring.userDefinedHeaderColor": {
    "enabled": true,
    "Header_1": {
      "color": "#0D1116",
      "backgroundColor": "background-color: #5b4996;",
      "textDecoration": ""
    },
    "Header_2": {
      "color": "#0D1116",
      "backgroundColor": "background-color: #21925b;",
      "textDecoration": ""
    },
    "Header_3": {
      "color": "#0D1116",
      "backgroundColor": "background-color: #027d95;",
      "textDecoration": ""
    },
    "Header_4": {
      "color": "#0D1116",
      "backgroundColor": "background-color: #585c89;",
      "textDecoration": ""
    },
    "Header_5": {
      "color": "#0D1116",
      "backgroundColor": "background-color: #0f857c;",
      "textDecoration": ""
    },
    "Header_6": {
      "color": "#0D1116",
      "backgroundColor": "background-color: #396592;",
      "textDecoration": ""
    }
  },

  // To enable key-repeating, run the commands that the vim plugin provides at the top of its instructions
  // After you run those commands, make sure to LOG OUT OF MACOS and then log back in
  "vim.leader": "<Space>",
  "vim.hlsearch": true,
  "vim.easymotion": true,
  "vim.incsearch": true,
  "vim.useSystemClipboard": true,
  // When I move down in folds through j and k I don't want the folds to expand
  "vim.foldfix": true,

  "vim.insertModeKeyBindings": [
    // I like going out of insert mode using kj
    { "before": ["k", "j"], "after": ["<Esc>"] }
  ],

  "vim.normalModeKeyBindingsNonRecursive": [
    // Fold with enter
    { "before": ["<Enter>"], "commands": ["editor.toggleFold"] },
    {
      "before": ["<Space>", "m", "p"],
      "commands": ["markdown.showPreviewToSide"]
    },
    // splits
    { "before": ["leader", "|"], "commands": [":vsplit"] },
    { "before": ["leader", "-"], "commands": [":split"] },
    // Go to beginning and end of line with gh and gl
    { "before": ["g", "h"], "commands": ["cursorHome"] },
    { "before": ["g", "l"], "commands": ["cursorEnd"] },
    // Nope, disabled this as I use them for telescope buffers and snipe
    // { "before": ["H"], "commands": ["cursorHome"] },
    // { "before": ["L"], "commands": ["cursorEnd"] },
    // Show and hide the sidebar
    {
      "before": ["leader", "e"],
      "commands": ["workbench.action.toggleSidebarVisibility"]
    },
    // Search in files
    {
      "before": ["leader", "s", "g"],
      "commands": ["workbench.action.findInFiles"]
    },
    // This is the way I find files in neovim
    {
      "before": ["leader", "f", "f"],
      "commands": ["workbench.action.quickOpen"]
    },
    // Close the current tab
    {
      "before": ["leader", "b", "d"],
      "commands": ["workbench.action.closeActiveEditor"]
    }
  ],
  "vim.visualModeKeyBindings": [
    // Stay in visual mode while indenting
    { "before": ["<"], "commands": ["editor.action.outdentLines"] },
    { "before": [">"], "commands": ["editor.action.indentLines"] },
    // Move selected lines while staying in visual mode
    { "before": ["J"], "commands": ["editor.action.moveLinesDownAction"] },
    { "before": ["K"], "commands": ["editor.action.moveLinesUpAction"] },
    // When in visual mode, I want to select to the beginning of the line
    {
      "before": ["g", "h"],
      "commands": [
        {
          "command": "cursorMove",
          "args": {
            "to": "wrappedLineStart",
            "by": "line",
            "value": 1,
            "select": true
          }
        }
      ]
    },
    // When in visual mode, I want to select to the end of the line
    {
      "before": ["g", "l"],
      "commands": [
        {
          "command": "cursorMove",
          "args": {
            "to": "wrappedLineEnd",
            "by": "line",
            "value": 1,
            "select": true
          }
        }
      ]
    }
  ],
  "git.autofetch": true,
  "workbench.colorTheme": "Linkarzu Dark Eldritch",
  "git.enableSmartCommit": true,
  "git.confirmSync": false,
  "totalTypeScript.hideAllTips": true,
  "totalTypeScript.hideBasicTips": false
}
